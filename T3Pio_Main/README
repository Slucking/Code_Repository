# T3Pio Pipeline

T3Pio is an amplicon generation pipeline built for designing direct from stool amplicon sets for HMAS schemes

## Description

T3Pio utilizes open source bioinformatics software and takes as input annotated genomes from the group of interest. Core genes are identified, and primers are designed to generate amplicons compatible with the userâ€™s chosen HMAS platform. Our settings allowed up to 3 degenerate bases per 180-250 bp primer.

## Requirements

1. Python 3 or higher. Download python [here](https://www.python.org/downloads/).
2. Orthofinder 2.1.2. Download orthofinder [here](https://github.com/davidemms/OrthoFinder).
3. TrimAl 1.2. Download orthofinder [here](https://github.com/inab/trimal).
4. EMOBSS 6.4.0. Download emboss [here](ftp://emboss.open-bio.org/pub/EMBOSS/).
5. Primer3 2.3.4. Download primer3 [here](https://github.com/primer3-org/primer3/releases).
6. MUSCLE 3.6. Download muscle [here](https://drive5.com/muscle/downloads_v3.htm).
7. boulderFile. Necessary input file for primer3. Works as a template file, that primer3 uses to generate primers.

## Install

1. Copy the Github repository to a folder  
`git clone https://github.com/Code_Repository/T3Pio_Main.git`

## Usage

1. Run the following script at your base folder  
 `python3 moduleFile.py -h `
 (there are numerous input flags needed)  
    1. Number of isolates to be analyize
    2. Percent inclusion for the partial core MLST scheme
    3. Location of the template boulderIO file
    4. File to the directory containing your gbk file
    5. Out directory for intermediate files to be stored
    6. Number of cores you want to use
   
## Main Components

####GENERAL NOTE THESE ARE THE MAJOR BLOCKS INVOLVED
SOME BLOCKS MAY BE UTILIZING OTHER MODULES/METHODS INSIDE THEM
GENERALLY SHOULD BE MORE GENERALIZED MODULES METHODS

#########################################################
Step1. User Inputs
('Int') number of isolates being input into the script
('Int') percent inclusion for orthogroups
How many isolates must be present in an orthogroup to be used
('String') boulder.io file with desired params
Missing Sequence portion of file
('String') folder path to folder containg GBK files
('String') Date, used in finding Orthofinder.txt file
('String') Output folder name
('Int') number of cores available 

#########################################################
Step2. Grabbing the GBK files
User input ('String') GBK folder path
Current method to grab files using glob and storing them in ('List') of ('Strings')

#########################################################
Step3. Parse the GBK Files
Current module takes as input the ('List') of ('Strings') containg the files paths to the GBK files
Returns (for now) a ('Dictionary') of ('Strings')
Dictionary format (dictionary[SequenceName]:'Sequence')
Stores the nucleic acid Sequence as the value and the key is SequenceName
Writes ('IO') FaaFiles with the amino acid sequences for each input isolate

#########################################################
Step4. Running Orthofinder
Future module takes as input ('Int') number of cores, ('String') Output folder name, and
('String') the user supplied date
Returns ('String') file path to Orthogroups.txt file

#########################################################
Step5. Parsing Orthofinder file
Current module takes as input ('String') file path to Orthogroups.txt file
Returns ('Dictionary')
Dictionary format (dictionary[Orthogroup]:['SeqName',...,'SeqName']
Stores a ('List') of SeqNames as the value and Orthogroup is the key

#########################################################
Step6. Paring Down of Orthogroups
Future module takes as input ('Int') number of isolates input, ('Int') percent inclusing, and
('Dictionary') from Step5
Returns ('List') of ('Class Objects')
Class OrthofinderResults
contains orthogroup number and ('List') of ('Strings')
('List') of ('Strings') contains the SeqNames
NOTE THE CLASS OBJECTS COULD ALSO BE IMPLEMENTED IN STEP5 INSTEAD

#########################################################
Step7. Create Multifasta File
Future module takes as input ('Class Object') OrthofinderResults, ('Dictionary') created in Step2, and
('String') Output name
Writes ('IO') a single multifasta file
Returns ('String') file path to the multifasta file

#########################################################
Step8. Running Muscle
Current/Future module takes as input ('String') file path to a multifasta file
Writes ('IO') muscle file
Returns ('String') file path to muscle file

#########################################################
Step9. Running trimAl
Current/Future module takes as input ('String') file path to muscle file
Writes ('IO') trimAl file
Returns ('String') file path to trimAl file

#########################################################
Step10. Running EMBOSS Consambig
Current/Future module takes as input ('String') file path to trimAl file
Writes ('IO') consambig file
Returns ('String') file path to consambig file

#########################################################
Step11. Running Primer3
Future module takes as input ('List') of ('Strings') containing boulder.io file params and,
('String') file path to consambig file
Reads ('IO') consambig file in to get ('String') consensus sequence
Writes ('IO') new boulder.io out conatinging consensus sequence
Returns ('Dictionary')
Dictionary format (dictionary[Orthogroup]:['Primer3',...,'Output'])
('List') of ('Strings') primer3 output is the value and the key if ('String') Orthogroup

#########################################################
Step12. Primer3 Parsing
Current module takes as input ('Dictionary') from Step12
Returns('List') of ('Class Objects') Primers

#########################################################
Step13. Check Primers Flanking Region
Future module takes as input ('List') of ('Class Objects') Primers
Returns ('List') of ('Class Objects') Primers

#########################################################
Step14. Checking Primers for Overlap
Future module takes as input ('List') of ('Class Objects') Primers
Returns ('List') of ('Class Objects') Primers

#########################################################
Step15. Running Primersearch
Future moduel takes as input ('List') of ('Class Objects') Primers and ('String') file path to trimAl file
Writes ('IO') primersearch file
Returns ('String') file path to primersearch file

#########################################################
Step16. Primersearch Output Parsing
Future module takes as input ('List') of ('Class Objects') Primers from Step15 and ('String') file path to primersearch file
Returns ('List') of ('Class Objects') PrimerSearch
Class PrimerSearch
('Class') PrimerSearch will hold ('Class') Primers holds ('Class') Orthogroup
addtionally stores ('Int') amplicon length, ('Int') LetfHit, and ('Int') RightHit

#########################################################
Step17. Amplicon Generation
Future module takes as input ('List') of ('Class Objects') PrimerSearch and ('String') file path to trimAl file
Returns nothing
Writes ('IO') multifasta files conating amplicons and primer files



# T3Pio Validation Module

The T3Pio Validation Module is designed to run primers created in the T3Pio pipeline on a set of isolates to generate in silico amplicons.


## Requirements

1. Python 3 or higher. Download python [here](https://www.python.org/downloads/).
2. EMOBSS 6.4.0. Download emboss [here](ftp://emboss.open-bio.org/pub/EMBOSS/).


## Install

1. Copy the Github repository to a folder  
`git clone https://github.com/Code_Repository/T3Pio_Main.git`

## Usage

1. Run the following script at your base folder  
 `python3 validationModule.py -h `
 (there are numerous input flags needed)  
    1. Directory where isolate assemblies are located
    2. File type of the assemblies
    3. Directory where the primer files are located
    4. Number of cores you want to use
    5. Out directory for files to be stored
   
## Main Components

####GENERAL NOTE THESE ARE THE MAJOR BLOCKS INVOLVED
SOME BLOCKS MAY BE UTILIZING OTHER MODULES/METHODS INSIDE THEM
GENERALLY SHOULD BE MORE GENERALIZED MODULES METHODS

#########################################################

Class1. Primers
relevent information regarding primers used in the analysis
    Attributes:
        orthogroupInfo: String representing which orthogroup the primer belongs to
        number: String representing which primer it is for a respective orthogroup
        leftSeq: String representing the forward primer sequence 5'-3'
        rightSeq: String representing the reverse primer sequence 5'-3'
        leftHit: Integer representing where the first base of the forward primer lands in a genome
        rightHit: Integer representing where the last base of the reverse primer lands in a genome
        leftLen: Integer representing the length of the forward primer
        rightLen: Integer representing the length of the reverse primer

#########################################################
Class2. PrimerSearchResults
Relevent information from in silico PCR program Emboss/primersearch
    Atributes:
       primerInfo: String representing the primer used in the in silico analysis
       sequenceName: String representing the contig the primers hit
       ampLen: Integer representing the length of the predicted amplicon
       leftHit: Integer representing where the first base of the forward primer lands
       rightHit: Integer representing where the last base of the reverse primer lands
       sequence: String representing the predicted amplicon

#########################################################

('Def') OutputLoggingFileSetter() comments
Takes as input ('String') outfile path 
('String') primerFile name
Sets Logger file name 
Sets input logging level to Debug
Sets logger file format to include Time,logging level, message
Set logger file handler
Returns nothing Just sets the logging file

#########################################################

('Def') PrimmersearchRunner() comments
Takes as input ('String') trimalFile path
('List') of ('Primers') ('Objects')
Creates ('IO') primer file for primersearch 
Pulls primer number/forward/reverse sequences from ('Primers') ('Object')
Stores information in ('List') primerInfoList
Runs primersearch using subprocess
Returns ('String') primersearchFile.ps file path

#########################################################
('Def') PrimersearchValidator() comments:
Takes as input ('List') ampliconInfo
('Int') numberIsolates
Uses list comprehension to pull sequence names from ('List') ampliconInfo
Creates ('Set') sequencesSet of ('List') sequences
Checks for equal length to ensure no duplicate isolates pulled
Checks correct number sequences present against ('Int') numberIsolates
Returns ('True') if proper number of isolates and no duplicates present
Returns ('False') if improper number of isolates and/or duplicates present

#########################################################
('Def') PrimersearchComber() comments:
Takes as input ('List') ampliconInfo
('Primer') ('Object') primer
('Dictionary') sequenceRecordDict
Parses ('List') ampliconInfo to find forwardHit/reverseHit/ampliconLen/sequenceName for each isolate record present in ('List') ampliconInfo
Pulls isolate sequence from ('Dictionary') sequenceRecordDict and slices ('String') for amplicon
sequence 
Stores information in ('Object') ('PrimerSearchResults') for each isolate
Returns ('List') of ('PrimerSearchResults') ('Objects')

#########################################################
('Def') PrimersearchParser() comments:
Takes as input ('String') primersearchFile file path
('Int') numberIsolates
('List') of ('Primer') ('Objects')
('String') trimalFile file path
('IO') reads in primersearchFile to ('List') primersearchInfo
Stores trimalFile into ('SeqIO') ('Dictionary') ('Object') sequenceRecordDict
Indexes ('List') primersearchInfo on 'Primer name' + ('Primer') ('Object') primer.numer
Slices ('List') primersearchInfo using index and ('Int') numerIsolates * 6 into ('List') ampliconInfo
Sends ('List') ampliconInfo and ('Int') numberIsolates to ('Def') PrimersearchValidator()
Sends ('List') ampliconInfo and ('Primer') ('Object') to ('Def') PrimersearchComber
Returns ('List') of ('PrimerSearchResults') ('Objects')

#########################################################
('Def') ValidationPrimerIntake() comments
Takes as input ('String') primerFile primer file path
Logger logging file
Creates ('Class') Primers object 
Returns primerObjects

#########################################################
('Def') AssemblyDictionary() comments
Takes as input ('String') assemblyFile file path
Logger logging file
Turns assembly file into ('Dict') sequenceRecordDict SeqIO dictionary object
Returns ('Dict') sequenceRecordDict

#########################################################
('Def') ParallelFunctions() comments
Takes as input('String') primerFile file path
('String') assemblyFile file path
('String') outfile file path
Sets functions to run in parallel
Returns ('List') of ('Objects') PrimerSearchResults